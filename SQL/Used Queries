PostgreSQL using PgAdmin 4 v5

### Create Table for Importing Data

-- Import each dataset from CSV file

CREATE TABLE trip_2020_05(
  ride_id varchar(45),
	rideable_type varchar(45),
	started_at timestamp,
	ended_at timestamp,
	start_station_name varchar(100),
	start_station_id varchar(100),
	end_station_name varchar(100),
	end_station_id varchar(100),
	start_lat float4,
	start_lng float4,
	end_lat float4,
	end_lng float4,
	member_casual varchar(45),
	ride_duration int8,
	ride_month int8,
	ride_weekday int8,
	ride_hour int8,
	time_of_day varchar(45)
)

### Data Aggregation

-- Once all tables having been created/imported, combine using UNION ALL

CREATE TABLE trip_all as
	((SELECT *
FROM trip_2020_05
UNION ALL
SELECT *
FROM trip_2020_06
UNION ALL
SELECT *
FROM trip_2020_07
UNION ALL
SELECT *
FROM trip_2020_08
UNION ALL
SELECT *
FROM trip_2020_09
UNION ALL
SELECT *
FROM trip_2020_10
UNION ALL
SELECT *
FROM trip_2020_11
UNION ALL
SELECT *
FROM trip_2020_12
UNION ALL
SELECT *
FROM trip_2021_01
UNION ALL
SELECT *
FROM trip_2021_02
UNION ALL
SELECT *
FROM trip_2021_03
UNION ALL
SELECT *
FROM trip_2021_04)
order by started_at desc)

-- Save output as .txt file

COPY(
	SELECT *
	FROM trip_all
	ORDER BY started_at desc)
TO 'E:\Data Sets\Cyclistic Bike Share\Data\trip_all' DELIMITER ',' CSV HEADER;

### Data Profiling

-- Summary Statistics for Ride_Duration: count, total, mean, std_dev, min, Q1, median, Q3, max

SELECT 'count' as summary_statistics,
    count(*) as rd_stats
FROM trip_all

UNION

SELECT 'total',
    sum(ride_duration)
FROM trip_all

UNION

SELECT 'mean',
    avg(ride_duration)
FROM trip_all

UNION

SELECT 'std_dev',
    stddev(ride_duration)
FROM trip_all

UNION

SELECT 'min',
    min(ride_duration)
FROM trip_all

UNION

SELECT 'Q1',
    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ride_duration)
FROM trip_all

UNION

SELECT 'median',
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ride_duration)
FROM trip_all

UNION

SELECT 'Q3',
    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ride_duration)
FROM trip_all

UNION

SELECT 'max',
    max(ride_duration)
FROM trip_all

### Data Cleaning

# Check/Drop Duplicates

-- Check if same ID + ride start

SELECT ride_id, started_at, COUNT(*)
FROM trip_all
GROUP BY ride_id, started_at
HAVING COUNT(*) > 1

# Check/Drop NULL Values

-- Key Columns: ride_id, started_at, ended_at, member_casual, ride_duration

SELECT *
FROM trip_all
WHERE (ride_id IS NULL
OR started_at IS NULL
OR ended_at IS NULL
OR member_casual IS NULL
OR ride_duration IS NULL)

# Check/Drop Negative Values: Ride Duration

-- If ride_duration < 0, drop - error in data collection

SELECT *
FROM trip_all
WHERE ride_duration < 0
order by ride_duration asc

# Check/Drop Outliers: Interquartile Range (IQR) Method 1.5 * IQR +/- (Q3, Q1)

-- Find Q3 and Q1

SELECT
	rd_quartile,
	MAX(ride_duration) AS quartile_break
FROM(
	SELECT
    ride_id,
		ride_duration,
		NTILE(4) OVER (ORDER BY ride_duration) AS rd_quartile
	FROM trip_all_clean) AS IQR
WHERE rd_quartile IN (1, 3)
GROUP BY rd_quartile

-- Once you find IQR (Q3 - Q1), apply formula to find/filter outlier range
-- Since right-skewed, no outliers on lower side (negative values already dropped)

SELECT *
FROM trip_all_clean
WHERE  ride_duration > 3255 

# Save/Export Clean Data for Analysis

COPY(
	SELECT *
	FROM trip_all_final
	ORDER BY started_at asc)
TO 'E:\Data Sets\Cyclistic Bike Share\Data\trip_all_final' DELIMITER ',' CSV HEADER;
